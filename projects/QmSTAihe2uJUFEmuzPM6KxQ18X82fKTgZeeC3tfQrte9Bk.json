{
  "cid": "QmSTAihe2uJUFEmuzPM6KxQ18X82fKTgZeeC3tfQrte9Bk",
  "endpoint": "https://index-api.onfinality.io/sq/Sahil24-lab/buzzkill-hatchlings-v1-3",
  "schema_content": "type Token @entity {\n  id: ID! # Token ID as a string\n  owner: String! # Owner's address as a string\n  rarity: String! # Rarity: Common, Rare, UltraRare\n  tokenURI: String! # Metadata URI\n  isStaked: Boolean! # Indicates if the token is currently staked\n  stakedNFT: StakedNFT @derivedFrom(field: \"tokenId\") # Reference to the StakedNFT entity if staked\n}\n\ntype User @entity {\n  id: ID!\n  mintedCount: BigInt!\n  lastMintedTime: BigInt!\n  stakingApproved: Boolean!\n  totalPoints: BigInt!\n  claimedPoints: BigInt!\n  totalProduction: BigInt!\n  averageProduction: BigInt!\n  userRewardMultiplier: BigInt!\n  hasExternalNFTFlag: Boolean!\n  stakedNFTs: [StakedNFT!]! @derivedFrom(field: \"ownerId\")\n  stakedNFTIds: [String!]!\n}\n\ntype StakedNFT @entity {\n  id: ID! # Use the tokenId as the ID (string)\n  tokenIdNum: BigInt! # Token ID as a BigInt\n  tokenId: Token! # Reference to the Token entity\n  stakedAt: BigInt! # Timestamp when the NFT was staked\n  lastClaimedAt: BigInt! # Timestamp of the last points claim\n  ownerId: User! # Reference to the User entity\n  environmentId: Environment! # Reference to the Environment entity\n  hiveId: Hive! # Reference to the Hive entity\n  userMultiplier: BigInt! # Multiplier assigned to the user at staking time\n  rarity: String! # Rarity of the staked NFT\n}\n\ntype Environment @entity {\n  id: ID! # Use environmentId as the ID (string)\n  environmentId: BigInt! # Numerical ID of the environment\n  hives: [Hive!]! @derivedFrom(field: \"environmentId\") # Hives within the environment\n  totalProduction: BigInt! # Total production across all hives in the environment\n  averageProduction: BigInt! # Average production across hives in the environment\n}\n\ntype Hive @entity {\n  id: ID! # Composite ID, e.g., \"environmentId-hiveId\"\n  hiveId: BigInt! # Numerical ID of the hive\n  environmentId: Environment! # Reference to the parent Environment entity\n  stakedNFTs: [StakedNFT!]! @derivedFrom(field: \"hiveId\") # NFTs staked in the hive\n  totalProduction: BigInt! # Total production per day for the hive\n  averageProduction: BigInt! # Average production per staked NFT per day in the hive\n}\n\ntype PointsClaimedEvent @entity {\n  id: ID! # Unique ID, e.g., transaction hash + log index\n  userId: User! # Reference to the User entity\n  points: BigInt! # Points claimed in the event\n  timestamp: BigInt! # Timestamp of the points claim\n}\n\ntype Mint @entity {\n  id: ID! # Unique mint event ID (e.g., txHash-logIndex)\n  owner: String! # Address of the user who minted\n  tokenIds: [String!]! # List of token IDs minted\n  quantity: BigInt! # Number of tokens minted\n  timestamp: BigInt! # Block timestamp of the mint event\n}\n\ntype Supply @entity {\n  id: ID!\n  currentMaxSupply: BigInt! # Current batch supply\n  totalSupply: BigInt! # Total supply of tokens\n}\n\ntype RarityURIs @entity {\n  id: ID! # Static ID, e.g., \"uris\"\n  commonURI: String! # Metadata URI for Common rarity\n  rareURI: String! # Metadata URI for Rare rarity\n  ultraRareURI: String! # Metadata URI for Ultra-Rare rarity\n}\n\ntype PointsHistory @entity {\n  id: ID! # Unique ID, e.g., \"userId-tokenId-timestamp\"\n  userId: User! # Reference to the User entity\n  pointsEarned: BigInt! # Points earned in this history entry\n  timestamp: BigInt! # Timestamp of when points were earned\n  nftId: StakedNFT! # Reference to the StakedNFT entity\n}\n\ntype DebugLog @entity {\n  id: ID! # Unique ID, e.g., \"logId\"\n  message: String! # Debug message\n  timestamp: BigInt! # Timestamp of the log\n}\n\ntype MaxBeesPerHiveUpdatedEvent @entity {\n  id: ID! # Unique ID, e.g., transactionHash-logIndex\n  oldMax: BigInt! # Previous maximum number of bees\n  newMax: BigInt! # Updated maximum number of bees\n  timestamp: BigInt! # Timestamp of the event\n}\n",
  "domain_name": "NFT Staking and Minting Analytics",
  "domain_capabilities": [
    "Query Token data including ownership, rarity, and staking status",
    "Analyze User staking activity, points, and production metrics",
    "Track StakedNFT relationships with Users, Environments, and Hives",
    "Monitor Mint events and token supply statistics",
    "Investigate PointsClaimedEvent history and user rewards",
    "Examine Environment and Hive production metrics"
  ],
  "decline_message": "I'm specialized in NFT Staking and Minting Analytics data queries. I can help you with NFT staking, user rewards, and minting events, but I cannot assist with [their topic]. Please ask me about NFT staking analytics instead.",
  "suggested_questions": [
    "Show me recent Mint events for a specific user",
    "What are the top Users by totalPoints?",
    "How many PointsClaimedEvents happened in the last week?",
    "Can you show me a sample GraphQL query for StakedNFT with its related User?",
    "Which Hives have the highest averageProduction?",
    "What's the current distribution of Token rarities?",
    "Show me Users with stakingApproved status",
    "What's the totalSupply of tokens across all batches?"
  ]
}